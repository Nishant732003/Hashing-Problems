

Q:1
Title: Raj's Antique Shop Adventure


Description:
Raj, the young antique collector, has discovered an ancient city with 
N antique shops lined up from left to right. Each shop contains an antique item of some
 medieval period.
 Raj can enter any shop visit several shops and leave from any shop. But  they wont let him enter the same shop twice.

Each shop is connected to its neighboring shops, i.e., the 1st shop is connected to the 2nd shop,
the 2nd shop is connected to the 1st and 3rd shops, and so on. The last shop, the N-th shop,
is only connected to the (N‚àí1)-th shop.

Raj wants to collect all the unique antique items in as few shops as possible.
Your task is to determine the minimum number of contiguous shops Raj needs to visit 
to collect all the different antique items.

Input:
The first line contains an integer 
N (1 ‚â§ ùëÅ ‚â§ 100,000) ‚Äî the number of shops.

The second line contains 
N integers a1,a2,......an
 (1 ‚â§ ai  ‚â§ 10^9) ‚Äî the types of antique items in each shop.

Output:
Output a single integer ‚Äî the minimum number of contiguous shops Raj needs to visit to collect all 
the different antique items.

Testcase:
3
7
1 2 1 3 2 1 4
5
8 7 9 9 7
4
1 2 1 3
output:
5
3
3



(Here in this example you can see contniously you can enter the shop twice but cannot  enter the
 same shop twice  after leaving)

output:
5

Thought Process To solve:
Here we need to find like contnious subarray which will have all antique elements. so we can use set to know how
many unique elements are there.Then We can Use Sliding Window with map .As we move from left to right we will 
store ech number and occurance in map so we can keep track of the number occurance of unique elements.
when map size equal to set size that subarray will be answer.




#cpp code 

#include <bits/stdc++.h>
using namespace std;

int main() {
    int N;
    cin >> N;
    vector<int> antiques(N);
    for (int i = 0; i < N; ++i) {
        cin >> antiques[i];
    }

   
    unordered_set<int> uniqueItems(antiques.begin(), antiques.end());
    int uniqueItemCount = uniqueItems.size();

    unordered_map<int, int>Count;
    int left = 0, minLength = N + 1, currentUnique = 0;

    for (int right = 0; right < N; ++right) {
        Count[antiques[right]]++;
        if (Count[antiques[right]] == 1) {
            currentUnique++;
        }

        while (currentUnique == uniqueItemCount) {
            minLength = min(minLength, right - left + 1);
            Count[antiques[left]]--;
            if (Count[antiques[left]] == 0) {
                currentUnique--;
            }
            left++;
        }
    }

    cout << minLength << endl;

    return 0;
}



//Java code

import java.util.*;
public class RajsAntiqueShopAdventure {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
   
        int N = scanner.nextInt();
        int[] antiques = new int[N];
        
       

        for (int i = 0; i < N; i++) {
            antiques[i] = scanner.nextInt();
        }
        
       
        Set<Integer> uniqueItemsSet = new HashSet<>();
        for (int item : antiques) {
            uniqueItemsSet.add(item);
        }
        int uniqueCount = uniqueItemsSet.size();
        
   
        Map<Integer, Integer> windowCount = new HashMap<>();
        int left = 0;
        int minLength = N + 1;
        int currentUnique = 0;
        
     
        for (int right = 0; right < N; right++) {
            int currentItem = antiques[right];
            windowCount.put(currentItem, windowCount.getOrDefault(currentItem, 0) + 1);
            if (windowCount.get(currentItem) == 1) {
                currentUnique++;
            }
            
            // When we have all unique items in the current window
            while (currentUnique == uniqueCount) {
                minLength = Math.min(minLength, right - left + 1);
                
                int leftItem = antiques[left];
                windowCount.put(leftItem, windowCount.get(leftItem) - 1);
                if (windowCount.get(leftItem) == 0) {
                    currentUnique--;
                }
                left++;
            }
        }
        
   
        System.out.println(minLength);
        
        scanner.close();
    }
}
